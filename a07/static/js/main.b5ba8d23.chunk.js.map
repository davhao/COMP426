{"version":3,"sources":["game.js","GameBoard.js","App.js","reportWebVitals.js","index.js"],"names":["Game","size","generateTile","index","Math","floor","random","gameState","board","seed","checkWin","includes","checkLoss","move","this","score","won","over","setupNewGame","boardObservers","win","lose","i","push","direction","immutable","legal","indices","j","length","legalSection","slideArray","update","values","map","res","prev","curr","boardIndex","stringifiedBoard","toString","callback","event","forEach","listener","getGameState","GameBoard","tiles","tile","className","rows","currRow","shift","row","App","useState","game","setGame","setGameState","useEffect","document","addEventListener","parseKey","registerOnMove","removeEventListener","e","console","log","key","onMove","style","color","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b5ba8d23.chunk.js","sourcesContent":["/*\r\nAdd your code for Game here\r\n */\r\n\r\n/**\r\n * Represents a 2048 Game\r\n * @constructor\r\n * @param {number} size - Size of size x size board\r\n */\r\nexport default class Game {\r\n\tconstructor(size) {\r\n\t\tthis.size = size;\r\n\r\n\t\t// Init gameState\r\n\t\tthis.gameState = {\r\n\t\t\tboard : null,\r\n\t\t\tscore : 0,\r\n\t\t\twon   : false,\r\n\t\t\tover  : false\r\n\t\t};\r\n\r\n\t\tthis.setupNewGame();\r\n\r\n\t\tthis.boardObservers = {\r\n\t\t\tmove : [],\r\n\t\t\twin  : [],\r\n\t\t\tlose : []\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n     * \r\n     * @returns an accurate gameState object representing the current game state.\r\n     */\r\n\tgetGameState() {\r\n\t\treturn this.gameState;\r\n\t}\r\n\r\n\t/**\r\n     * Sets up new board and pushes it to gameState\r\n     */\r\n\tsetupNewGame() {\r\n\t\t// Fill Board\r\n\t\tconst board = [];\r\n\t\tfor (let i = 0; i < this.size ** 2; i++) {\r\n\t\t\tboard.push(0);\r\n\t\t}\r\n\r\n\t\tthis.gameState.board = board;\r\n\r\n\t\tthis.generateTile();\r\n\t\tthis.generateTile();\r\n\r\n\t\tthis.gameState = {\r\n\t\t\t...this.gameState,\r\n\t\t\tscore : 0,\r\n\t\t\twon   : false,\r\n\t\t\tover  : false\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n     * Picks an empty tile on the board and a generates a new tile with a 90% chance of being a 2 and a 10% chance of being a 4\r\n    */\r\n\tgenerateTile = () => {\r\n\t\t// Pick empty tile\r\n\t\tlet index = Math.floor(Math.random() * this.size ** 2);\r\n\t\twhile (this.gameState.board[index] !== 0) {\r\n\t\t\tindex = Math.floor(Math.random() * this.size ** 2);\r\n\t\t}\r\n\r\n\t\t// Fill tile\r\n\t\tconst seed = Math.random();\r\n\t\tthis.gameState.board[index] = seed < 0.9 ? 2 : 4;\r\n\t};\r\n\r\n\t/**\r\n     *  Replaces current gameState with gameState param\r\n     * @param {Object} gameState - new gameState object\r\n     */\r\n\tloadGame(gameState) {\r\n\t\tthis.gameState = { ...this.gameState, ...gameState };\r\n\t}\r\n\r\n\t/**\r\n     * \r\n     * @param {string} direction - Given \"up\", \"down\", \"left\", or \"right\" as string input, it makes the appropriate shifts and adds a random tile.\r\n     * @param {boolean} immutable - Set true to disable mutation of the gameState, useful for checking game loss\r\n     * @returns {boolean} True if legal move exists (if immutable = true) / has been made (if immutable = false)\r\n     */\r\n\tmove(direction, immutable = false) {\r\n\t\tlet legal = false;\r\n\t\tswitch (direction) {\r\n\t\t\tcase 'up':\r\n\t\t\t\tfor (let i = 0; i < this.size; i++) {\r\n\t\t\t\t\tconst indices = [];\r\n\t\t\t\t\tfor (let j = i; j < this.size ** 2; j += this.size) {\r\n\t\t\t\t\t\tindices.push(j);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (indices.length === this.size) {\r\n\t\t\t\t\t\tconst legalSection = this.slideArray(indices, immutable);\r\n\t\t\t\t\t\tlegal = legal || legalSection;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'down':\r\n\t\t\t\tfor (let i = this.size ** 2 - 1; i >= 0; i--) {\r\n\t\t\t\t\tconst indices = [];\r\n\t\t\t\t\tfor (let j = i; j >= 0; j -= this.size) {\r\n\t\t\t\t\t\tindices.push(j);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (indices.length === this.size) {\r\n\t\t\t\t\t\tconst legalSection = this.slideArray(indices, immutable);\r\n\t\t\t\t\t\tlegal = legal || legalSection;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'left':\r\n\t\t\t\tfor (let i = 0; i < this.size ** 2; i += this.size) {\r\n\t\t\t\t\tconst indices = [];\r\n\t\t\t\t\tfor (let j = i; j < i + this.size; j++) {\r\n\t\t\t\t\t\tindices.push(j);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (indices.length === this.size) {\r\n\t\t\t\t\t\tconst legalSection = this.slideArray(indices, immutable);\r\n\t\t\t\t\t\tlegal = legal || legalSection;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'right':\r\n\t\t\t\tfor (let i = this.size - 1; i < this.size ** 2; i += this.size) {\r\n\t\t\t\t\tconst indices = [];\r\n\t\t\t\t\tfor (let j = i; j > i - this.size; j--) {\r\n\t\t\t\t\t\tindices.push(j);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (indices.length === this.size) {\r\n\t\t\t\t\t\tconst legalSection = this.slideArray(indices, immutable);\r\n\t\t\t\t\t\tlegal = legal || legalSection;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tif (!immutable) {\r\n\t\t\tif (legal) {\r\n\t\t\t\tthis.generateTile();\r\n\t\t\t}\r\n\r\n\t\t\tif (this.checkWin()) {\r\n\t\t\t\tthis.gameState.won = true;\r\n\t\t\t\tthis.update('win');\r\n\t\t\t}\r\n\t\t\tif (this.checkLoss()) {\r\n\t\t\t\tthis.gameState.over = true;\r\n\t\t\t\tthis.update('lose');\r\n\t\t\t}\r\n\t\t\tthis.update('move');\r\n\t\t}\r\n\r\n\t\treturn legal;\r\n\t}\r\n\r\n\t/**\r\n     * Treats every move as a 'left' (<--) move and slides/combines values accordingly \r\n     * @param {array} indices - Array of indexes of the section to be slid in order ex. left shift of [1, 2, 3] => section = [0, 1, 2]\r\n     * @param {boolean} immutable - Set true to disable mutation of the gameState, useful for checking game loss\r\n     * @returns {boolean} True if the move is legal\r\n     */\r\n\tslideArray(indices, immutable) {\r\n\t\tconst values = indices.map((i) => this.gameState.board[i]);\r\n\r\n\t\tconst res = [];\r\n\r\n\t\tlet prev = null;\r\n\t\tlet i = 0;\r\n\t\twhile (i < values.length) {\r\n\t\t\tconst curr = values[i];\r\n\r\n\t\t\tif (curr === 0) {\r\n\t\t\t\ti++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (!prev) {\r\n\t\t\t\tprev = curr;\r\n\t\t\t\ti++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (curr === prev) {\r\n\t\t\t\tres.push(curr + prev);\r\n\t\t\t\tif (!immutable) {\r\n\t\t\t\t\tthis.gameState.score += curr + prev;\r\n\t\t\t\t}\r\n\t\t\t\tprev = null;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tres.push(prev);\r\n\t\t\t\tprev = curr;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (prev) {\r\n\t\t\tres.push(prev);\r\n\t\t}\r\n\r\n\t\twhile (res.length < indices.length) {\r\n\t\t\tres.push(0);\r\n\t\t}\r\n\r\n\t\tlet legal = false;\r\n\t\tfor (let i = 0; i < values.length; i++) {\r\n\t\t\tconst boardIndex = indices[i];\r\n\r\n\t\t\tlegal = legal || this.gameState.board[boardIndex] !== res[i];\r\n\t\t\tif (!immutable) {\r\n\t\t\t\tthis.gameState.board[boardIndex] = res[i];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn legal;\r\n\t}\r\n\r\n\t/**\r\n     * \r\n     * @returns True if 2048 tile exists\r\n     */\r\n\tcheckWin = () => {\r\n\t\treturn this.gameState.board.includes(2048);\r\n\t};\r\n\r\n\t/**\r\n     * \r\n     * @returns True if no valid moves left\r\n     */\r\n\tcheckLoss = () => {\r\n\t\treturn !(\r\n\t\t\tthis.move('up', true) ||\r\n\t\t\tthis.move('down', true) ||\r\n\t\t\tthis.move('left', true) ||\r\n\t\t\tthis.move('right', true)\r\n\t\t);\r\n\t};\r\n\r\n\t/**\r\n     * \r\n     * @returns a string representation of the game as text/ascii. See the gameState section above for an example. The run_in_console.js script uses the toString() method to print the state of the game to the console after every move.\r\n     */\r\n\ttoString() {\r\n\t\tlet stringifiedBoard = '';\r\n\r\n\t\tfor (let i = 0; i < this.size ** 2; i += this.size) {\r\n\t\t\tlet curr = [];\r\n\t\t\tfor (let j = 0; j < this.size; j++) {\r\n\t\t\t\tcurr.push(this.gameState.board[i + j]);\r\n\t\t\t}\r\n\t\t\tstringifiedBoard += curr.toString();\r\n\t\t\tstringifiedBoard += '\\n';\r\n\t\t}\r\n\r\n\t\treturn stringifiedBoard;\r\n\t}\r\n\r\n\t/**\r\n     *Takes a callback function as input and registers that function as a listener to the move event. Every time a move is made, the game should call all previously registered move callbacks, passing in the game's current gameState as an argument to the function. \r\n     * @param {function} callback \r\n     */\r\n\tonMove(callback) {\r\n\t\tthis.boardObservers.move.push(callback);\r\n\t}\r\n\r\n\t/**\r\n     * Takes a callback function as input and registers that function as a listener to the win event. When the player wins the game (by making a 2048 tile), the game should call all previously registered win callbacks, passing in the game's current gameState as an argument to the function.\r\n     * @param {function} callback \r\n     */\r\n\tonWin(callback) {\r\n\t\tthis.boardObservers.win.push(callback);\r\n\t}\r\n\r\n\t/**\r\n     * Takes a callback function as input and registers that function as a listener to the move event. When the game transitions into a state where no more valid moves can be made, the game should call all previously registered lose callbacks, passing in the game's current gameState as an argument to the function.\r\n     * @param {function} callback \r\n     */\r\n\tonLose(callback) {\r\n\t\tthis.boardObservers.lose.push(callback);\r\n\t}\r\n\r\n\t/**\r\n     *  Calls all callbacks registered under the event\r\n     * @param {string} event - Event to be emmitted\r\n     */\r\n\tupdate(event) {\r\n\t\tthis.boardObservers[event].forEach((listener) => listener(this.getGameState()));\r\n\t}\r\n}\r\n","const GameBoard = ({ gameState }) => {\r\n\tconst tiles = gameState.board.map((tile, i) => (\r\n\t\t<div className=\"tile\" key={i}>\r\n\t\t\t<span>{tile}</span>\r\n\t\t</div>\r\n\t));\r\n\r\n\tlet rows = [];\r\n\r\n\twhile (tiles.length) {\r\n\t\tconst currRow = [];\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tcurrRow.push(tiles.shift());\r\n\t\t}\r\n\t\trows.push(currRow);\r\n\t}\r\n\r\n\trows = rows.map((row, i) => (\r\n\t\t<div className=\"row\" key={i}>\r\n\t\t\t{row}\r\n\t\t</div>\r\n\t));\r\n\r\n\treturn <div className=\"board\">{rows}</div>;\r\n};\r\n\r\nexport default GameBoard;\r\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport Game from './game';\nimport GameBoard from './GameBoard';\n\nfunction App() {\n\tconst [\n\t\tgame,\n\t\tsetGame\n\t] = useState(new Game(4));\n\tconst [\n\t\tgameState,\n\t\tsetGameState\n\t] = useState(game.getGameState());\n\n\tuseEffect(() => {\n\t\tdocument.addEventListener('keydown', parseKey);\n\t\tregisterOnMove();\n\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('keydown', parseKey);\n\t\t};\n\t}, []);\n\n\tconst parseKey = (e) => {\n\t\tconsole.log(e.key);\n\t\t// eslint-disable-next-line default-case\n\t\tswitch (e.key) {\n\t\t\tcase 'ArrowUp':\n\t\t\t\tgame.move('up');\n\t\t\t\tbreak;\n\t\t\tcase 'ArrowDown':\n\t\t\t\tgame.move('down');\n\t\t\t\tbreak;\n\t\t\tcase 'ArrowLeft':\n\t\t\t\tgame.move('left');\n\t\t\t\tbreak;\n\t\t\tcase 'ArrowRight':\n\t\t\t\tgame.move('right');\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tconst registerOnMove = () => {\n\t\tgame.onMove((gameState) => {\n\t\t\tconsole.log(gameState.board);\n\t\t\tsetGameState({ ...gameState });\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>David's 2048</h1>\n\t\t\t<h2 style={gameState.over ? { color: '#ff5555' } : { color: '#8be9fd ' }}>\n\t\t\t\t{gameState.over ? 'Game Over' : gameState.won ? 'You Win!' : null}\n\t\t\t</h2>\n\t\t\t<div className=\"game-info\">\n\t\t\t\t<h3>Score: {gameState.score}</h3>\n\t\t\t\t<h3\n\t\t\t\t\tclassName=\"reset\"\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tconsole.log('reset');\n\t\t\t\t\t\tgame.setupNewGame();\n\t\t\t\t\t\tsetGame(game);\n\t\t\t\t\t\tsetGameState(game.getGameState());\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tReset Game\n\t\t\t\t</h3>\n\t\t\t</div>\n\t\t\t<div className=\"board-wrapper\">\n\t\t\t\t<GameBoard gameState={gameState} />\n\t\t\t</div>\n\t\t\t<div className=\"instructions\">\n\t\t\t\t<span>\n\t\t\t\t\t<strong>HOW TO PLAY:</strong> Use your arrow keys to move the tiles. Tiles with the same number\n\t\t\t\t\tmerge into one when they touch. Add them up to reach 2048!\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}